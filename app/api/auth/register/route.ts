import { type NextRequest, NextResponse } from "next/server"

export async function POST(request: NextRequest) {
  try {
    const { username, email, fullName, phoneNumber, password, userType } = await request.json()

    // Validate required fields
    if (!username || !email || !fullName || !phoneNumber || !password || !userType) {
      return NextResponse.json({ message: "Semua field harus diisi" }, { status: 400 })
    }

    // Validate email format
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    if (!emailRegex.test(email)) {
      return NextResponse.json({ message: "Format email tidak valid" }, { status: 400 })
    }

    // Validate student email domain
    if (userType === "student" && !email.includes("@student.its.ac.id")) {
      return NextResponse.json(
        { message: "Email mahasiswa harus menggunakan domain @student.its.ac.id" },
        { status: 400 },
      )
    }

    // Validate password length
    if (password.length < 6) {
      return NextResponse.json({ message: "Password minimal 6 karakter" }, { status: 400 })
    }

    // Validate phone number
    const phoneRegex = /^08[0-9]{8,11}$/
    if (!phoneRegex.test(phoneNumber)) {
      return NextResponse.json(
        { message: "Format nomor telepon tidak valid (gunakan format 08xxxxxxxxxx)" },
        { status: 400 },
      )
    }

    // In real app, check if email/username already exists in database
    // For now, we'll simulate successful registration

    // Generate new user ID (in real app, this would be auto-generated by database)
    const newUserId = Math.floor(Math.random() * 1000) + 100

    // In real app, hash the password before storing
    // const hashedPassword = await bcrypt.hash(password, 10)

    // Mock successful registration
    const newUser = {
      id: newUserId,
      username,
      email,
      fullName,
      phoneNumber,
      userType,
      isActive: true,
      createdAt: new Date().toISOString(),
    }

    return NextResponse.json({
      message: "Registrasi berhasil",
      user: newUser,
    })
  } catch (error) {
    return NextResponse.json({ message: "Terjadi kesalahan server" }, { status: 500 })
  }
}
